#!/usr/bin/env bash

#MIT License
#
#Copyright (c) 2021 shirot7335
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

set -eu

readonly CMDNAME="$(basename $0)"

declare -A OPTION_SET

TEMPLATE_FILE_PATH=''
DIST_FILE_PATH=''

function usage_exit() {
    cat <<HELP 1>&2
Usage: ${CMDNAME} [OPTION]...
[OPTION]
    --help                           Display help
    --template=<template_file_path>  Use the given <template_file_path> when generate file.
    --dist=<dist_file_path>          Use the given <dist_file_path> when generate file.
    --KEY=VALUE                      KEY is template file string surrounded by delimiter({{ }}).
                                     VALUE is the string after conversion by this script.
HELP

    exit 1;
}

# FOR DEBUG {{{

function debug_print_all() {
    echo '==============================================='
    debug__print_template_file_path
    debug__print_dist_file_path
    debug__print_option_set
    echo '==============================================='
}

function debug__print_template_file_path() {
    echo "template: "${TEMPLATE_FILE_PATH}""
}

function debug__print_dist_file_path() {
    echo "dist: "${DIST_FILE_PATH}
}

function debug__print_option_set() {
    for key in "${!OPTION_SET[@]}"; do
        value="${OPTION_SET[${key}]}"

        echo "key: ${key}"
        echo "value: ${value}"
    done
}
# }}}

function error_message() {
    message_type="${1}"
    function cannot_access() {
        echo "${CMDNAME}: cannot access '${file_path}': No such file or directory" 1>&2
    }

   "${message_type}"
}

function _check_file_path() {
    file_path="${1}"

    if [ -e "${file_path}" ]; then
        true
    else
        error_message "cannot_access"
        false
    fi
}

function check_template_file_path() {
    _check_file_path "${TEMPLATE_FILE_PATH}"
}

function check_dist_file_dir_path() {
    _check_file_path "$(dirname "${DIST_FILE_PATH}")"
}

function check_required_settings() {
    check_template_file_path && \
    check_dist_file_dir_path || \
    exit 1
}

function build_sed_expression() {
    from="${1}"
    to="${2}"

    echo "-e 's/{{${from}}}/${to}/g'"
}

function build_sed_command() {
    filepath="${1}"

    sed_command='sed'
    for key in "${!OPTION_SET[@]}"; do
        value="${OPTION_SET[${key}]}"

        sed_expression="$(build_sed_expression "${key}" "${value}")"
        sed_command=""${sed_command}" "${sed_expression}""
    done

    echo ""${sed_command}" "${filepath}""
}

function generate_file() {
    filepath="${1}"
    distpath="${2}"

    eval "$(build_sed_command "${1}")" > "${distpath}"
}

function main() {
    generate_file "${TEMPLATE_FILE_PATH}" "${DIST_FILE_PATH}"
}

while [ $# -gt 0 ]
do
    case $1 in
        --help)
            usage_exit
            ;;
        --template=*)
            TEMPLATE_FILE_PATH="$(echo $1 | sed -e 's/^--template=//')"
            ;;
        --dist=*)
            DIST_FILE_PATH="$(echo $1 | sed -e 's/^--dist=//')"
            ;;
        --*=*)
            key=$(echo $1 | sed -e 's/^--\(.*\)=.*/\1/')
            value=$(echo $1 | sed -e 's/^--.*=\(.*\)/\1/')
            OPTION_SET["${key}"]="${value}"
            ;;
   esac
   shift
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    check_required_settings

    main
fi


exit 0
